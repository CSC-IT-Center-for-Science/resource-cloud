apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: pebbles
  template: pebbles
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

metadata:
  annotations:
    description: Pebbles
    iconClass: icon-python
    openshift.io/display-name: Pebbles
    openshift.io/documentation-url: https://github.com/CSCfi/pebbles
    openshift.io/long-description: Pebbles
    openshift.io/provider-display-name: CSC
    tags: pebbles,python
    template.openshift.io/bindable: "false"
  name: pebbles

objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    pb-secret-key: ${PB_SECRET_KEY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: ${NAME}-api
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}-api

- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}-api
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}-api
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: Git
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:2.7
          namespace: ${BUILD_IMAGE_NAMESPACE}
        env:
        - name: UPGRADE_PIP_TO_LATEST
          value: "1"
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
    - type: GitHub
      github:
        secret: ${GITHUB_WEBHOOK_SECRET}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Pebbles API
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-api
  spec:
    replicas: 1
    selector:
      name: ${NAME}-api
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}-api
        name: ${NAME}-api
      spec:
        containers:
        - name: pebbles-api
          env:
          - name: APP_MODULE
            value: pebbles.server:app
          - name: PB_SQLALCHEMY_DATABASE_URI
            value: postgresql://pebbles:pebbles@postgresql/pebbles
          - name: PB_DB_AUTOMIGRATION
            value: "1"
          - name: PB_DEBUG
            value: "1"
          - name: DB_AUTOMIGRATION
            value: "1"
          - name: DEBUG
            value: "1"
          - name: GUNICORN_CMD_ARGS
            value: "--workers=2 --max-requests=100"
          - name: PB_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: pb-secret-key
          image: ' '
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
          resources:
            requests:
              memory: ${MEMORY_API}
            limits:
              memory: ${MEMORY_API}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - pebbles-api
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Pebbles worker
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-worker
  spec:
    replicas: 1
    selector:
      name: ${NAME}-worker
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}-worker
        name: ${NAME}-worker
      spec:
        containers:
        - name: worker
          volumeMounts:
            - name: ${NAME}-m2m-vol
              mountPath: ${M2M_STORE}
              readOnly: true
          env:
          - name: APP_SCRIPT
            value: /opt/app-root/src/deployment/run_celery.bash
          - name: CELERY_PROCESS_NAME
            value: worker
          - name: CELERY_QUEUE
            value: provisioning_tasks-1
          - name: CELERY_LOGLEVEL
            value: DEBUG
          - name: PB_PLUGIN_WHITELIST
            value: ${PLUGIN_WHITELIST}
          - name: PB_INTERNAL_API_BASE_URL
            value: http://${NAME}-api:8080/api/v1
          - name: PB_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: pb-secret-key
          - name: PB_M2M_CREDENTIAL_STORE
            value: ${M2M_STORE}/${NAME}-m2m
          image: ' '
          resources:
            requests:
              memory: ${MEMORY_WORKER}
            limits:
              memory: ${MEMORY_WORKER}
        volumes:
          - name: ${NAME}-m2m-vol
            secret:
              secretName: ${NAME}-m2m
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - worker
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Pebbles system worker
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-system-worker
  spec:
    replicas: 1
    selector:
      name: ${NAME}-system-worker
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}-system-worker
        name: ${NAME}-system-worker
      spec:
        containers:
        - name: worker
          env:
          - name: APP_SCRIPT
            value: /opt/app-root/src/deployment/run_celery.bash
          - name: CELERY_PROCESS_NAME
            value: system_worker
          - name: CELERY_QUEUE
            value: system_tasks
          - name: CELERY_LOGLEVEL
            value: DEBUG
          - name: PB_PLUGIN_WHITELIST
            value: ${PLUGIN_WHITELIST}
          - name: PB_INTERNAL_API_BASE_URL
            value: http://${NAME}-api:8080/api/v1
          - name: PB_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: pb-secret-key
          image: ' '
          resources:
            requests:
              memory: ${MEMORY_WORKER}
            limits:
              memory: ${MEMORY_WORKER}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - worker
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Pebbles periodical worker
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-periodical-worker
  spec:
    replicas: 1
    selector:
      name: ${NAME}-periodical-worker
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}-periodical-worker
        name: ${NAME}-periodical-worker
      spec:
        containers:
        - name: worker
          env:
          - name: APP_SCRIPT
            value: /opt/app-root/src/deployment/run_celery.bash
          - name: CELERY_CMD
            value: beat
          - name: CELERY_PROCESS_NAME
            value: system_worker
          - name: CELERY_QUEUE
            value: system
          - name: CELERY_LOGLEVEL
            value: DEBUG
          - name: PB_INTERNAL_API_BASE_URL
            value: http://${NAME}-api:8080/api/v1
          - name: PB_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: pb-secret-key
          image: ' '
          resources:
            requests:
              memory: ${MEMORY_WORKER}
            limits:
              memory: ${MEMORY_WORKER}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - worker
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    storageClassName: 'standard-rwo'
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - name: postgresql
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE}
                -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              memory: ${MEMORY_POSTGRESQL}
            limits:
              memory: ${MEMORY_POSTGRESQL}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: ${BUILD_IMAGE_NAMESPACE}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
    name: redis
  spec:
    ports:
    - name: redis
      nodePort: 0
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: redis
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: redis
  spec:
    replicas: 1
    selector:
      name: redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: redis
      spec:
        containers:
        - capabilities: {}
          env: {}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 ping)" == "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              memory: 100Mi
            limits:
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir: {}
          name: redis-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: redis:3.2
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange

parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: pebbles

- description: The OpenShift Namespace where the build image ImageStream resides.
  displayName: Build Image Namespace
  name: BUILD_IMAGE_NAMESPACE
  required: true
  value: openshift

- description: Memory for API container
  displayName: Memory (API)
  name: MEMORY_API
  required: true
  value: 200Mi

- description: Memory for worker containers
  displayName: Memory (workers)
  name: MEMORY_WORKER
  required: true
  value: 200Mi

- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/CSCfi/pebbles

- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF

- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR

- description: The exposed hostname that will route to the Flask service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN

- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET

- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql

- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: pebbles

- displayName: Database Username
  name: DATABASE_USER
  required: true
  value: pebbles

- displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  value: pebbles
  name: DATABASE_PASSWORD

- description: Memory for PostgreSQL container
  displayName: Memory (PostgreSQL)
  name: MEMORY_POSTGRESQL
  required: true
  value: 200Mi

- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 2Gi

- description: Relative path to Gunicorn configuration file (optional).
  displayName: Application Configuration File Path
  name: APP_CONFIG

- description: The custom PyPi index URL
  displayName: Custom PyPi Index URL
  name: PIP_INDEX_URL

- displayName: Plugins whitelist
  name: PLUGIN_WHITELIST
  value: OpenShiftDriver

- description: Secret master key
  displayName: Secret master key
  name: PB_SECRET_KEY
  value: change_me

- displayName: M2M Credentials Store
  name: M2M_STORE
  value: /run/shm
